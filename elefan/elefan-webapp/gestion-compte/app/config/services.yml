# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests,Twig}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']
    AppBundle\Helper\:
        resource: '../../src/AppBundle/Helper'
        arguments: ['@service_container']
        tags: ['controller.service_arguments']
    app.twig_extension:
        class: AppBundle\Twig\Extension\AppExtension
        arguments: ['@service_container']
        tags:
            - { name: twig.extension }
    app.twig.extensions.mail:
        class: AppBundle\Twig\Extension\MailExtension
        arguments: ['@mailer_service']
        tags:
            - { name: twig.extension }

    app.form.registration:
        class: AppBundle\Form\RegistrationType
        tags:
            - { name: form.type, alias: app_user_registration }
    app.authentication_success_handler:
            class: AppBundle\EventListener\AuthenticationSuccessHandler
            tags:
                - { name: kernel.event_listener, event: security.interactive_login, method: onSecurityInteractiveLogin }
    oauth_event_listener:
            class:  AppBundle\EventListener\OAuthEventListener
            arguments:
                $entityManager: "@doctrine.orm.entity_manager"
            tags:
                - { name: kernel.event_listener, event: fos_oauth_server.pre_authorization_process, method: onPreAuthorizationProcess }
                - { name: kernel.event_listener, event: fos_oauth_server.post_authorization_process, method: onPostAuthorizationProcess }
    helloasso_event_listener:
            class:  AppBundle\EventListener\HelloassoEventListener
            arguments:
                $entityManager: "@doctrine.orm.entity_manager"
                $container: "@service_container"
            tags:
                - { name: kernel.event_listener, event: helloasso.payment_after_save, method: onPaymentAfterSave }
    time_log_event_listener:
            class:  AppBundle\EventListener\TimeLogEventListener
            arguments:
                $entityManager: "@doctrine.orm.entity_manager"
                $logger: "@logger"
                $container: "@service_container"
            tags:
                - { name: kernel.event_listener, event: shift.booked, method: onShiftBooked }
                - { name: kernel.event_listener, event: shift.dismissed, method: onShiftDismissed }
                - { name: kernel.event_listener, event: shift.freed, method: onShiftFreed }
                - { name: kernel.event_listener, event: shift.deleted, method: onShiftDeleted }
                - { name: kernel.event_listener, event: member.cycle.end, method: onMemberCycleEnd }
    emailing_event_listener:
            class:  AppBundle\EventListener\EmailingEventListener
            arguments:
                $mailer: "@mailer"
                $logger: "@logger"
                $container: "@service_container"
                $memberEmail: "%emails.member%"
                $wikiKeysUrl: "%wiki_keys_url%"
            tags:
                - { name: kernel.event_listener, event: code.new, method: onCodeNew }
                - { name: kernel.event_listener, event: shift.booked, method: onShiftBooked }
                - { name: kernel.event_listener, event: shift.deleted, method: onShiftDeleted }
                - { name: kernel.event_listener, event: member.cycle.start, method: onMemberCycleStart }
                - { name: kernel.event_listener, event: member.cycle.half, method: onMemberCycleHalf }
                - { name: kernel.event_listener, event: member.created, method: onMemberCreated }

    shift_service:
            class:  AppBundle\Service\ShiftService
            public: true
            arguments: ["@doctrine.orm.entity_manager", "%due_duration_by_cycle%", "%min_shift_duration%"]

    logger.user_processor:
            class: AppBundle\Monolog\MonologUserProcessor
            arguments:
                - '@security.token_storage'
            tags:
                - { name: monolog.processor, method: processRecord }

    logging.handler.mattermost:
            class: AppBundle\Monolog\ToggleableHandler
            decorates: monolog.handler.mattermost
            arguments:
                - '@logging.handler.mattermost.inner'
                - '%logging.mattermost.enabled%'

    logging.handler.swiftmailer:
            class: AppBundle\Monolog\ToggleableHandler
            decorates: monolog.handler.swiftmailer
            arguments:
                - '@logging.handler.swiftmailer.inner'
                - '%logging.swiftmailer.enabled%'

    mailer_service:
            class: AppBundle\Service\MailerService
            public: true
            arguments:
                $baseDomain: '%emails.base_domain%'
                $sendableEmails: '%emails.sendable%'
